<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management - ZBase</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/static/css/admin.css">
</head>
<body>
    <%- include('../partials/navbar', {activePage: 'users'}) %>

    <div class="container-fluid">
        <!-- Main content -->
        <main class="px-md-4 py-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
                <h1 class="h2">User Management</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="refresh-btn">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                        <i class="bi bi-plus-circle"></i> Add User
                    </button>
                </div>
            </div>

            <!-- Search and Filter -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" id="search-input" placeholder="Search by name or email...">
                        <button class="btn btn-outline-secondary" type="button" id="search-btn">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="role-filter">
                        <option value="">All Roles</option>
                        <option value="admin">Admin</option>
                        <option value="manager">Manager</option>
                        <option value="user">User</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="sort-by">
                        <option value="id">Sort by ID</option>
                        <option value="name">Sort by Name</option>
                        <option value="email">Sort by Email</option>
                        <option value="createdAt" selected>Sort by Created Date</option>
                    </select>
                </div>
            </div>

            <!-- Users Table -->
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Roles</th>
                            <th scope="col">Created At</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="users-table">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="pagination">
                    <!-- Will be populated by JavaScript -->
                </ul>
            </nav>
        </main>
    </div>

    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="add-user-error" class="alert alert-danger d-none"></div>
                    <form id="add-user-form">
                        <div class="mb-3">
                            <label for="add-name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="add-name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="add-email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="add-email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="add-password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="add-password" name="password" required minlength="6">
                            <div class="form-text">Must be at least 6 characters long.</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Roles</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="admin" id="role-admin">
                                <label class="form-check-label" for="role-admin">Admin</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="manager" id="role-manager">
                                <label class="form-check-label" for="role-manager">Manager</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="user" id="role-user" checked>
                                <label class="form-check-label" for="role-user">User</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="add-user-btn">Add User</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="edit-user-error" class="alert alert-danger d-none"></div>
                    <form id="edit-user-form">
                        <input type="hidden" id="edit-user-id">
                        <div class="mb-3">
                            <label for="edit-name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="edit-name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit-email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="edit-email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit-password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="edit-password" name="password" placeholder="Leave blank to keep current password">
                            <div class="form-text">Only fill this if you want to change the password.</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Roles</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="admin" id="edit-role-admin">
                                <label class="form-check-label" for="edit-role-admin">Admin</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="manager" id="edit-role-manager">
                                <label class="form-check-label" for="edit-role-manager">Manager</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="user" id="edit-role-user">
                                <label class="form-check-label" for="edit-role-user">User</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="update-user-btn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if user is logged in and has admin role
            checkAuth();

            // Set user name in navbar
            const userData = localStorage.getItem('user');
            if (userData) {
                const user = JSON.parse(userData);
                document.getElementById('user-name').textContent = user.name;
            }            // Logout functionality
            document.getElementById('logout-btn').addEventListener('click', function(e) {
                e.preventDefault();
                
                // Call the server-side logout API first
                fetch('/api/auth/logout', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                })
                .then(response => response.json())
                .then(data => {
                    // Then clear local storage
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    // Redirect to login page after successful logout
                    window.location.href = '/login';
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    // Still clear local storage and redirect even if there's an error
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    window.location.href = '/login';
                });
            });

            // Refresh button functionality
            document.getElementById('refresh-btn').addEventListener('click', function() {
                loadUsers();
            });

            // Initialize variables for pagination
            let currentPage = 1;
            const usersPerPage = 10;
            let allUsers = [];

            // Load initial data
            loadUsers();

            // Search, filter, and sort functionality
            document.getElementById('search-btn').addEventListener('click', function() {
                filterAndDisplayUsers();
            });

            document.getElementById('search-input').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') {
                    filterAndDisplayUsers();
                }
            });

            document.getElementById('role-filter').addEventListener('change', function() {
                filterAndDisplayUsers();
            });

            document.getElementById('sort-by').addEventListener('change', function() {
                filterAndDisplayUsers();
            });

            // Add user functionality
            document.getElementById('add-user-btn').addEventListener('click', async function() {
                const nameInput = document.getElementById('add-name');
                const emailInput = document.getElementById('add-email');
                const passwordInput = document.getElementById('add-password');
                const roleAdmin = document.getElementById('role-admin');
                const roleManager = document.getElementById('role-manager');
                const roleUser = document.getElementById('role-user');
                const errorAlert = document.getElementById('add-user-error');

                // Validate form
                if (!nameInput.value || !emailInput.value || !passwordInput.value) {
                    errorAlert.textContent = 'All fields are required';
                    errorAlert.classList.remove('d-none');
                    return;
                }

                // Collect roles
                const roles = [];
                if (roleAdmin.checked) roles.push('admin');
                if (roleManager.checked) roles.push('manager');
                if (roleUser.checked) roles.push('user');
                
                if (roles.length === 0) {
                    errorAlert.textContent = 'At least one role must be selected';
                    errorAlert.classList.remove('d-none');
                    return;
                }

                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch('/api/users', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            name: nameInput.value,
                            email: emailInput.value,
                            password: passwordInput.value,
                            roles: roles
                        })
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to add user');
                    }

                    // Close modal and reload data
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('add-user-form').reset();
                    errorAlert.classList.add('d-none');
                    
                    // Reload users
                    loadUsers();
                    
                    // Show success message
                    alert('User added successfully');
                    
                } catch (error) {
                    errorAlert.textContent = error.message;
                    errorAlert.classList.remove('d-none');
                }
            });

            // Edit user functionality
            document.getElementById('update-user-btn').addEventListener('click', async function() {
                const userId = document.getElementById('edit-user-id').value;
                const nameInput = document.getElementById('edit-name');
                const emailInput = document.getElementById('edit-email');
                const passwordInput = document.getElementById('edit-password');
                const roleAdmin = document.getElementById('edit-role-admin');
                const roleManager = document.getElementById('edit-role-manager');
                const roleUser = document.getElementById('edit-role-user');
                const errorAlert = document.getElementById('edit-user-error');

                // Validate form
                if (!nameInput.value || !emailInput.value) {
                    errorAlert.textContent = 'Name and email are required';
                    errorAlert.classList.remove('d-none');
                    return;
                }

                // Collect roles
                const roles = [];
                if (roleAdmin.checked) roles.push('admin');
                if (roleManager.checked) roles.push('manager');
                if (roleUser.checked) roles.push('user');
                
                if (roles.length === 0) {
                    errorAlert.textContent = 'At least one role must be selected';
                    errorAlert.classList.remove('d-none');
                    return;
                }

                try {
                    const token = localStorage.getItem('token');
                    
                    // Prepare request body
                    const userData = {
                        name: nameInput.value,
                        email: emailInput.value,
                        roles: roles
                    };
                    
                    // Only include password if it's provided
                    if (passwordInput.value) {
                        userData.password = passwordInput.value;
                    }

                    const response = await fetch(`/api/users/${userId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(userData)
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to update user');
                    }

                    // Close modal and reload data
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('edit-user-form').reset();
                    errorAlert.classList.add('d-none');
                    
                    // Reload users
                    loadUsers();
                    
                    // Show success message
                    alert('User updated successfully');
                    
                } catch (error) {
                    errorAlert.textContent = error.message;
                    errorAlert.classList.remove('d-none');
                }
            });

            // Auth check function
            function checkAuth() {
                const token = localStorage.getItem('token');
                const userData = localStorage.getItem('user');
                
                if (!token || !userData) {
                    window.location.href = '/login';
                    return;
                }
                
                const user = JSON.parse(userData);
                if (!user.roles.includes('admin')) {
                    alert('You do not have permission to access this page');
                    window.location.href = '/dashboard';
                }
            }

            // Load users function
            async function loadUsers() {
                try {
                    const token = localStorage.getItem('token');
                    if (!token) {
                        throw new Error('Authentication required');
                    }

                    const response = await fetch('/api/users', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch users');
                    }

                    allUsers = await response.json();
                    filterAndDisplayUsers();
                    
                } catch (error) {
                    console.error('Error loading users:', error);
                    alert('Failed to load users: ' + error.message);
                }
            }

            // Filter and display users
            function filterAndDisplayUsers() {
                const searchValue = document.getElementById('search-input').value.toLowerCase();
                const roleFilter = document.getElementById('role-filter').value;
                const sortBy = document.getElementById('sort-by').value;
                
                // Apply filters
                let filteredUsers = allUsers.filter(user => {
                    // Search filter
                    const matchesSearch = 
                        user.name.toLowerCase().includes(searchValue) || 
                        user.email.toLowerCase().includes(searchValue);
                    
                    // Role filter
                    const matchesRole = roleFilter ? 
                        user.roles.includes(roleFilter) : true;
                    
                    return matchesSearch && matchesRole;
                });
                
                // Apply sorting
                filteredUsers.sort((a, b) => {
                    if (sortBy === 'id') {
                        return a.id - b.id;
                    } else if (sortBy === 'name') {
                        return a.name.localeCompare(b.name);
                    } else if (sortBy === 'email') {
                        return a.email.localeCompare(b.email);
                    } else if (sortBy === 'createdAt') {
                        return new Date(b.createdAt) - new Date(a.createdAt);
                    }
                    return 0;
                });
                
                // Pagination
                const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
                if (currentPage > totalPages && totalPages > 0) {
                    currentPage = totalPages;
                }
                
                const startIndex = (currentPage - 1) * usersPerPage;
                const paginatedUsers = filteredUsers.slice(startIndex, startIndex + usersPerPage);
                
                // Update table
                updateUsersTable(paginatedUsers);
                
                // Update pagination
                updatePagination(totalPages);
            }

            // Update users table
            function updateUsersTable(users) {
                const usersTable = document.getElementById('users-table');
                usersTable.innerHTML = '';
                
                if (users.length === 0) {
                    usersTable.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center">No users found</td>
                        </tr>
                    `;
                    return;
                }
                
                users.forEach(user => {
                    const row = document.createElement('tr');
                    
                    row.innerHTML = `
                        <td>${user.id}</td>
                        <td>${user.name}</td>
                        <td>${user.email}</td>
                        <td>${user.roles.join(', ')}</td>
                        <td>${new Date(user.createdAt).toLocaleString()}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-1 edit-user" data-id="${user.id}">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-user" data-id="${user.id}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    `;
                    
                    usersTable.appendChild(row);
                });
                
                // Add event listeners for edit and delete buttons
                document.querySelectorAll('.edit-user').forEach(button => {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-id');
                        openEditUserModal(userId);
                    });
                });
                
                document.querySelectorAll('.delete-user').forEach(button => {
                    button.addEventListener('click', function() {
                        if (confirm('Are you sure you want to delete this user?')) {
                            const userId = this.getAttribute('data-id');
                            deleteUser(userId);
                        }
                    });
                });
            }

            // Update pagination
            function updatePagination(totalPages) {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';
                
                if (totalPages <= 1) {
                    return;
                }
                
                // Previous button
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                `;
                prevLi.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (currentPage > 1) {
                        currentPage--;
                        filterAndDisplayUsers();
                    }
                });
                pagination.appendChild(prevLi);
                
                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    const pageLi = document.createElement('li');
                    pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                    pageLi.addEventListener('click', function(e) {
                        e.preventDefault();
                        currentPage = i;
                        filterAndDisplayUsers();
                    });
                    pagination.appendChild(pageLi);
                }
                
                // Next button
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                `;
                nextLi.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (currentPage < totalPages) {
                        currentPage++;
                        filterAndDisplayUsers();
                    }
                });
                pagination.appendChild(nextLi);
            }

            // Open edit user modal
            function openEditUserModal(userId) {
                const user = allUsers.find(u => u.id === parseInt(userId));
                if (!user) return;
                
                document.getElementById('edit-user-id').value = user.id;
                document.getElementById('edit-name').value = user.name;
                document.getElementById('edit-email').value = user.email;
                document.getElementById('edit-password').value = '';
                
                document.getElementById('edit-role-admin').checked = user.roles.includes('admin');
                document.getElementById('edit-role-manager').checked = user.roles.includes('manager');
                document.getElementById('edit-role-user').checked = user.roles.includes('user');
                
                document.getElementById('edit-user-error').classList.add('d-none');
                
                const editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));
                editUserModal.show();
            }

            // Delete user
            async function deleteUser(userId) {
                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`/api/users/${userId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to delete user');
                    }
                    
                    alert('User deleted successfully');
                    loadUsers();
                    
                } catch (error) {
                    console.error('Error deleting user:', error);
                    alert('Failed to delete user: ' + error.message);
                }
            }
        });
    </script>
</body>
</html>