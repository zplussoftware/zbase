<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activity Logs - ZBase</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/static/css/admin.css">
</head>
<body>
    <!-- Top Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-primary bg-opacity-75 sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand text-white" href="/admin">ZBase Admin</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin">
                            <i class="bi bi-speedometer2 me-1"></i> Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/users">
                            <i class="bi bi-people me-1"></i> Users
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/roles">
                            <i class="bi bi-shield-lock me-1"></i> Roles
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/permissions">
                            <i class="bi bi-key me-1"></i> Permissions
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active text-white" href="/admin/activity-logs">
                            <i class="bi bi-journal-text me-1"></i> Activity Logs
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/settings">
                            <i class="bi bi-gear me-1"></i> Settings
                        </a>
                    </li>
                </ul>
                <div class="dropdown">
                    <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" id="user-dropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-person-circle me-2"></i>
                        <span id="user-name">Admin</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-light dropdown-menu-end" aria-labelledby="user-dropdown">
                        <li><a class="dropdown-item" href="/admin">Dashboard</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#" id="logout-btn">Sign out</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <!-- Main content -->
            <main class="px-md-4 py-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
                    <h1 class="h2">Activity Logs</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="refresh-btn">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                        <div class="btn-group me-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="export-csv">
                                <i class="bi bi-file-earmark-text"></i> Export CSV
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Search and Filter -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <input type="text" class="form-control" id="search-input" placeholder="Search logs...">
                            <button class="btn btn-outline-secondary" type="button" id="search-btn">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="module-filter">
                            <option value="">All Modules</option>
                            <option value="auth">Authentication</option>
                            <option value="user">User Management</option>
                            <option value="role">Role Management</option>
                            <option value="permission">Permission Management</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="action-filter">
                            <option value="">All Actions</option>
                            <option value="LOGIN">Login</option>
                            <option value="LOGOUT">Logout</option>
                            <option value="REGISTER">Register</option>
                            <option value="USER_CREATE">User Create</option>
                            <option value="USER_UPDATE">User Update</option>
                            <option value="USER_DELETE">User Delete</option>
                            <option value="ROLE">Role Actions</option>
                            <option value="PERMISSION">Permission Actions</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="date-filter">
                            <option value="all">All Time</option>
                            <option value="today">Today</option>
                            <option value="week">This Week</option>
                            <option value="month">This Month</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="sort-by">
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                        </select>
                    </div>
                </div>

                <!-- Activity Logs Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Timestamp</th>
                                <th scope="col">User</th>
                                <th scope="col">Action</th>
                                <th scope="col">Module</th>
                                <th scope="col">Description</th>
                                <th scope="col">Details</th>
                            </tr>
                        </thead>
                        <tbody id="activity-logs-table">
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- Will be populated by JavaScript -->
                    </ul>
                </nav>
            </main>
        </div>
    </div>

    <!-- Log Details Modal -->
    <div class="modal fade" id="logDetailsModal" tabindex="-1" aria-labelledby="logDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logDetailsModalLabel">Activity Log Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>ID:</strong> <span id="detail-id"></span></p>
                            <p><strong>Timestamp:</strong> <span id="detail-timestamp"></span></p>
                            <p><strong>User:</strong> <span id="detail-user"></span> (ID: <span id="detail-user-id"></span>)</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Action:</strong> <span id="detail-action"></span></p>
                            <p><strong>Module:</strong> <span id="detail-module"></span></p>
                            <p><strong>IP Address:</strong> <span id="detail-ip"></span></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <p><strong>Description:</strong></p>
                        <p id="detail-description" class="ps-3"></p>
                    </div>
                    <div class="mb-3">
                        <p><strong>Details:</strong></p>
                        <pre id="detail-json" class="bg-light p-3 border rounded"></pre>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if user is logged in and has admin role
            checkAuth();

            // Set user name in navbar
            const userData = localStorage.getItem('user');
            if (userData) {
                const user = JSON.parse(userData);
                document.getElementById('user-name').textContent = user.name;
            }

            // Logout functionality
            document.getElementById('logout-btn').addEventListener('click', function(e) {
                e.preventDefault();
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                window.location.href = '/login';
            });

            // Refresh button functionality
            document.getElementById('refresh-btn').addEventListener('click', function() {
                loadActivityLogs();
            });

            // Export CSV functionality
            document.getElementById('export-csv').addEventListener('click', function() {
                exportActivityLogsToCSV();
            });

            // Initialize variables for pagination
            let currentPage = 1;
            const logsPerPage = 10;
            let allLogs = [];

            // Load initial data
            loadActivityLogs();

            // Search, filter, and sort functionality
            document.getElementById('search-btn').addEventListener('click', function() {
                filterAndDisplayLogs();
            });

            document.getElementById('search-input').addEventListener('keyup', function(e) {
                if (e.key === 'Enter') {
                    filterAndDisplayLogs();
                }
            });

            document.getElementById('module-filter').addEventListener('change', function() {
                filterAndDisplayLogs();
            });

            document.getElementById('action-filter').addEventListener('change', function() {
                filterAndDisplayLogs();
            });

            document.getElementById('date-filter').addEventListener('change', function() {
                filterAndDisplayLogs();
            });

            document.getElementById('sort-by').addEventListener('change', function() {
                filterAndDisplayLogs();
            });

            // Auth check function
            function checkAuth() {
                const token = localStorage.getItem('token');
                const userData = localStorage.getItem('user');
                
                if (!token || !userData) {
                    window.location.href = '/login';
                    return;
                }
                
                const user = JSON.parse(userData);
                if (!user.roles.includes('admin')) {
                    alert('You do not have permission to access this page');
                    window.location.href = '/dashboard';
                }
            }

            // Load activity logs function
            async function loadActivityLogs() {
                try {
                    const token = localStorage.getItem('token');
                    if (!token) {
                        throw new Error('Authentication required');
                    }

                    const response = await fetch('/api/activity-logs', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch activity logs');
                    }

                    const result = await response.json();
                    allLogs = result.data;
                    filterAndDisplayLogs();
                    
                } catch (error) {
                    console.error('Error loading activity logs:', error);
                    alert('Failed to load activity logs: ' + error.message);
                }
            }

            // Filter and display logs
            function filterAndDisplayLogs() {
                const searchValue = document.getElementById('search-input').value.toLowerCase();
                const moduleFilter = document.getElementById('module-filter').value;
                const actionFilter = document.getElementById('action-filter').value;
                const dateFilter = document.getElementById('date-filter').value;
                const sortBy = document.getElementById('sort-by').value;
                
                // Apply filters
                let filteredLogs = allLogs.filter(log => {
                    // Search filter - match against all text fields
                    const matchesSearch = 
                        (log.userName && log.userName.toLowerCase().includes(searchValue)) || 
                        (log.action && log.action.toLowerCase().includes(searchValue)) ||
                        (log.module && log.module.toLowerCase().includes(searchValue)) ||
                        (log.description && log.description.toLowerCase().includes(searchValue));
                    
                    // Module filter
                    const matchesModule = moduleFilter ? log.module === moduleFilter : true;
                    
                    // Action filter (basic action type or prefix match)
                    const matchesAction = actionFilter ? 
                        (actionFilter.length <= 5 ? log.action === actionFilter : log.action.startsWith(actionFilter)) : true;
                    
                    // Date filter
                    let matchesDate = true;
                    if (dateFilter !== 'all') {
                        const logDate = new Date(log.createdAt);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (dateFilter === 'today') {
                            const tomorrow = new Date(today);
                            tomorrow.setDate(tomorrow.getDate() + 1);
                            matchesDate = logDate >= today && logDate < tomorrow;
                        } else if (dateFilter === 'week') {
                            const weekStart = new Date(today);
                            weekStart.setDate(weekStart.getDate() - weekStart.getDay());
                            const weekEnd = new Date(weekStart);
                            weekEnd.setDate(weekEnd.getDate() + 7);
                            matchesDate = logDate >= weekStart && logDate < weekEnd;
                        } else if (dateFilter === 'month') {
                            const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
                            const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                            matchesDate = logDate >= monthStart && logDate <= monthEnd;
                        }
                    }
                    
                    return matchesSearch && matchesModule && matchesAction && matchesDate;
                });
                
                // Apply sorting
                filteredLogs.sort((a, b) => {
                    if (sortBy === 'newest') {
                        return new Date(b.createdAt) - new Date(a.createdAt);
                    } else {
                        return new Date(a.createdAt) - new Date(b.createdAt);
                    }
                });
                
                // Calculate pagination
                const totalPages = Math.ceil(filteredLogs.length / logsPerPage);
                if (currentPage > totalPages) {
                    currentPage = totalPages || 1;
                }
                
                const start = (currentPage - 1) * logsPerPage;
                const end = start + logsPerPage;
                const logsToDisplay = filteredLogs.slice(start, end);
                
                // Update logs table
                updateActivityLogsTable(logsToDisplay);
                
                // Update pagination
                updatePagination(totalPages);
            }

            // Update activity logs table
            function updateActivityLogsTable(logs) {
                const activityLogsTable = document.getElementById('activity-logs-table');
                activityLogsTable.innerHTML = '';
                
                if (logs.length === 0) {
                    activityLogsTable.innerHTML = `
                        <tr>
                            <td colspan="7" class="text-center">No activity logs found.</td>
                        </tr>
                    `;
                    return;
                }
                
                logs.forEach(log => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${log.id}</td>
                        <td>${new Date(log.createdAt).toLocaleString()}</td>
                        <td>${log.userName || 'Unknown'}</td>
                        <td><span class="badge bg-${getActionBadgeColor(log.action)}">${formatAction(log.action)}</span></td>
                        <td>${log.module ? formatModule(log.module) : 'N/A'}</td>
                        <td>${log.description || 'N/A'}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-info view-details" data-id="${log.id}">
                                <i class="bi bi-eye"></i>
                            </button>
                        </td>
                    `;
                    
                    activityLogsTable.appendChild(row);
                });
                
                // Add event listeners for view details buttons
                document.querySelectorAll('.view-details').forEach(button => {
                    button.addEventListener('click', function() {
                        const logId = this.getAttribute('data-id');
                        showLogDetails(logId);
                    });
                });
            }

            // Show log details in modal
            function showLogDetails(logId) {
                const log = allLogs.find(l => l.id === parseInt(logId));
                if (!log) return;
                
                document.getElementById('detail-id').textContent = log.id;
                document.getElementById('detail-timestamp').textContent = new Date(log.createdAt).toLocaleString();
                document.getElementById('detail-user').textContent = log.userName || 'Unknown';
                document.getElementById('detail-user-id').textContent = log.userId;
                document.getElementById('detail-action').textContent = formatAction(log.action);
                document.getElementById('detail-module').textContent = formatModule(log.module) || 'N/A';
                document.getElementById('detail-ip').textContent = log.ipAddress || 'N/A';
                document.getElementById('detail-description').textContent = log.description || 'N/A';
                
                // Format JSON details nicely
                if (log.details) {
                    const formattedJSON = JSON.stringify(log.details, null, 2);
                    document.getElementById('detail-json').textContent = formattedJSON;
                } else {
                    document.getElementById('detail-json').textContent = 'No details available';
                }
                
                const logDetailsModal = new bootstrap.Modal(document.getElementById('logDetailsModal'));
                logDetailsModal.show();
            }

            // Update pagination
            function updatePagination(totalPages) {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';
                
                if (totalPages <= 1) {
                    return;
                }
                
                // Previous button
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a>`;
                pagination.appendChild(prevLi);
                
                // Page numbers
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, startPage + 4);
                
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }
                
                for (let i = startPage; i <= endPage; i++) {
                    const pageLi = document.createElement('li');
                    pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    pagination.appendChild(pageLi);
                }
                
                // Next button
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>`;
                pagination.appendChild(nextLi);
                
                // Add event listeners to pagination links
                document.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const pageNum = parseInt(this.getAttribute('data-page'));
                        if (pageNum >= 1 && pageNum <= totalPages) {
                            currentPage = pageNum;
                            filterAndDisplayLogs();
                        }
                    });
                });
            }

            // Export activity logs to CSV
            function exportActivityLogsToCSV() {
                // Apply current filters
                const searchValue = document.getElementById('search-input').value.toLowerCase();
                const moduleFilter = document.getElementById('module-filter').value;
                const actionFilter = document.getElementById('action-filter').value;
                const dateFilter = document.getElementById('date-filter').value;
                
                let filteredLogs = allLogs.filter(log => {
                    const matchesSearch = 
                        (log.userName && log.userName.toLowerCase().includes(searchValue)) || 
                        (log.action && log.action.toLowerCase().includes(searchValue)) ||
                        (log.module && log.module.toLowerCase().includes(searchValue)) ||
                        (log.description && log.description.toLowerCase().includes(searchValue));
                    
                    const matchesModule = moduleFilter ? log.module === moduleFilter : true;
                    const matchesAction = actionFilter ? 
                        (actionFilter.length <= 5 ? log.action === actionFilter : log.action.startsWith(actionFilter)) : true;
                    
                    // Date filter
                    let matchesDate = true;
                    if (dateFilter !== 'all') {
                        // Same date filtering as in filterAndDisplayLogs
                        const logDate = new Date(log.createdAt);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (dateFilter === 'today') {
                            const tomorrow = new Date(today);
                            tomorrow.setDate(tomorrow.getDate() + 1);
                            matchesDate = logDate >= today && logDate < tomorrow;
                        } else if (dateFilter === 'week') {
                            const weekStart = new Date(today);
                            weekStart.setDate(weekStart.getDate() - weekStart.getDay());
                            const weekEnd = new Date(weekStart);
                            weekEnd.setDate(weekEnd.getDate() + 7);
                            matchesDate = logDate >= weekStart && logDate < weekEnd;
                        } else if (dateFilter === 'month') {
                            const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
                            const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                            matchesDate = logDate >= monthStart && logDate <= monthEnd;
                        }
                    }
                    
                    return matchesSearch && matchesModule && matchesAction && matchesDate;
                });
                
                // Sort by creation date (newest first)
                filteredLogs.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                
                // Create CSV content
                const headers = ['ID', 'Timestamp', 'User ID', 'User Name', 'Action', 'Module', 'Description', 'IP Address'];
                let csvContent = headers.join(',') + '\n';
                
                filteredLogs.forEach(log => {
                    const timestamp = new Date(log.createdAt).toLocaleString();
                    const userName = (log.userName || 'Unknown').replace(/,/g, ' '); // Escape commas
                    const action = (log.action || '').replace(/,/g, ' ');
                    const module = (log.module || '').replace(/,/g, ' ');
                    const description = (log.description || '').replace(/,/g, ' ').replace(/\n/g, ' '); // Remove commas and newlines
                    const ipAddress = log.ipAddress || '';
                    
                    const row = [
                        log.id,
                        `"${timestamp}"`,
                        log.userId,
                        `"${userName}"`,
                        `"${action}"`,
                        `"${module}"`,
                        `"${description}"`,
                        ipAddress
                    ];
                    
                    csvContent += row.join(',') + '\n';
                });
                
                // Create download link
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.setAttribute('href', url);
                link.setAttribute('download', `activity_logs_${new Date().toISOString().slice(0, 10)}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            // Helper function to get badge color for action type
            function getActionBadgeColor(action) {
                if (!action) return 'secondary';
                
                if (action === 'LOGIN') return 'success';
                if (action === 'LOGOUT') return 'info';
                if (action === 'LOGIN_FAILED') return 'danger';
                if (action === 'REGISTER') return 'primary';
                
                if (action.includes('CREATE')) return 'success';
                if (action.includes('UPDATE')) return 'warning';
                if (action.includes('DELETE')) return 'danger';
                
                return 'secondary';
            }

            // Helper function to format action for display
            function formatAction(action) {
                if (!action) return 'Unknown';
                
                // Replace underscores with spaces and title case
                return action.replace(/_/g, ' ')
                    .split(' ')
                    .map(word => word.charAt(0) + word.slice(1).toLowerCase())
                    .join(' ');
            }

            // Helper function to format module for display
            function formatModule(module) {
                if (!module) return '';
                
                // Title case the module name
                return module.charAt(0).toUpperCase() + module.slice(1);
            }
        });
    </script>
</body>
</html>