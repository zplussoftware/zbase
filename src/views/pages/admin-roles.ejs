<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Role Management - ZBase</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/static/css/admin.css">
</head>
<body>
    <!-- Top Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-primary bg-opacity-75 sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand text-white" href="/admin">ZBase Admin</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin">
                            <i class="bi bi-speedometer2 me-1"></i> Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/users">
                            <i class="bi bi-people me-1"></i> Users
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active text-white" href="/admin/roles">
                            <i class="bi bi-shield-lock me-1"></i> Roles
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/permissions">
                            <i class="bi bi-key me-1"></i> Permissions
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/admin/settings">
                            <i class="bi bi-gear me-1"></i> Settings
                        </a>
                    </li>
                </ul>
                <div class="dropdown">
                    <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" id="user-dropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-person-circle me-2"></i>
                        <span id="user-name">Admin</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-light dropdown-menu-end" aria-labelledby="user-dropdown">
                        <li><a class="dropdown-item" href="/admin">Dashboard</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#" id="logout-btn">Sign out</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <!-- Main content -->
        <main class="px-md-4 py-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
                <h1 class="h2">Role Management</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="refresh-btn">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addRoleModal">
                        <i class="bi bi-plus-circle"></i> Add Role
                    </button>
                </div>
            </div>

            <!-- Roles Table -->
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">Users Count</th>
                                <th scope="col">Created At</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="roles-table">
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </main>
        </div>
    </div>

    <!-- Add Role Modal -->
    <div class="modal fade" id="addRoleModal" tabindex="-1" aria-labelledby="addRoleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addRoleModalLabel">Add New Role</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="add-role-error" class="alert alert-danger d-none"></div>
                    <form id="add-role-form">
                        <div class="mb-3">
                            <label for="role-name" class="form-label">Role Name</label>
                            <input type="text" class="form-control" id="role-name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="role-description" class="form-label">Description</label>
                            <textarea class="form-control" id="role-description" name="description" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="add-role-btn">Add Role</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Role Modal -->
    <div class="modal fade" id="editRoleModal" tabindex="-1" aria-labelledby="editRoleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editRoleModalLabel">Edit Role</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="edit-role-error" class="alert alert-danger d-none"></div>
                    <form id="edit-role-form">
                        <input type="hidden" id="edit-role-id">
                        <div class="mb-3">
                            <label for="edit-role-name" class="form-label">Role Name</label>
                            <input type="text" class="form-control" id="edit-role-name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit-role-description" class="form-label">Description</label>
                            <textarea class="form-control" id="edit-role-description" name="description" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="update-role-btn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Role Permissions Modal -->
    <div class="modal fade" id="rolePermissionsModal" tabindex="-1" aria-labelledby="rolePermissionsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rolePermissionsModalLabel">Role Permissions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="role-permissions-error" class="alert alert-danger d-none"></div>
                    <div class="mb-3">
                        <h6 id="permissions-role-name" class="fw-bold"></h6>
                        <input type="hidden" id="permissions-role-id">
                    </div>
                    
                    <ul class="nav nav-tabs" id="permissionsTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="features-tab" data-bs-toggle="tab" data-bs-target="#features" type="button" role="tab" aria-controls="features" aria-selected="true">Feature-based Permissions</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="controllers-tab" data-bs-toggle="tab" data-bs-target="#controllers" type="button" role="tab" aria-controls="controllers" aria-selected="false">Controller Actions</button>
                        </li>
                    </ul>
                    
                    <div class="tab-content p-3 border border-top-0 rounded-bottom" id="permissionsTabContent">
                        <!-- Feature-based permissions tab -->
                        <div class="tab-pane fade show active" id="features" role="tabpanel" aria-labelledby="features-tab">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card mb-3">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">User Management</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-view-users">
                                                <label class="form-check-label" for="perm-view-users">
                                                    View Users
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-create-users">
                                                <label class="form-check-label" for="perm-create-users">
                                                    Create Users
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-edit-users">
                                                <label class="form-check-label" for="perm-edit-users">
                                                    Edit Users
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-delete-users">
                                                <label class="form-check-label" for="perm-delete-users">
                                                    Delete Users
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card mb-3">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">Role Management</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-view-roles">
                                                <label class="form-check-label" for="perm-view-roles">
                                                    View Roles
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-create-roles">
                                                <label class="form-check-label" for="perm-create-roles">
                                                    Create Roles
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-edit-roles">
                                                <label class="form-check-label" for="perm-edit-roles">
                                                    Edit Roles
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-delete-roles">
                                                <label class="form-check-label" for="perm-delete-roles">
                                                    Delete Roles
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card mb-3">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">System Settings</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-view-settings">
                                                <label class="form-check-label" for="perm-view-settings">
                                                    View Settings
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-edit-settings">
                                                <label class="form-check-label" for="perm-edit-settings">
                                                    Edit Settings
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card mb-3">
                                        <div class="card-header bg-light">
                                            <h6 class="mb-0">Dashboard</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-view-dashboard">
                                                <label class="form-check-label" for="perm-view-dashboard">
                                                    View Dashboard
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input feature-permission" type="checkbox" id="perm-dashboard-reports">
                                                <label class="form-check-label" for="perm-dashboard-reports">
                                                    View Reports
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Controller-based permissions tab -->
                        <div class="tab-pane fade" id="controllers" role="tabpanel" aria-labelledby="controllers-tab">
                            <div class="d-flex justify-content-end mb-3">
                                <button type="button" class="btn btn-sm btn-outline-primary" id="toggle-all-permissions">
                                    Toggle All
                                </button>
                            </div>
                            
                            <div class="accordion" id="controllersAccordion">
                                <!-- User Controller -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="userControllerHeading">
                                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#userControllerCollapse" aria-expanded="true" aria-controls="userControllerCollapse">
                                            User Controller
                                        </button>
                                    </h2>
                                    <div id="userControllerCollapse" class="accordion-collapse collapse show" aria-labelledby="userControllerHeading" data-bs-parent="#controllersAccordion">
                                        <div class="accordion-body">
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-user-findAll">
                                                <label class="form-check-label" for="perm-user-findAll">
                                                    <code>GET /api/users</code> - Find All Users
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-user-findOne">
                                                <label class="form-check-label" for="perm-user-findOne">
                                                    <code>GET /api/users/:id</code> - Find One User
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-user-create">
                                                <label class="form-check-label" for="perm-user-create">
                                                    <code>POST /api/users</code> - Create User
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-user-update">
                                                <label class="form-check-label" for="perm-user-update">
                                                    <code>PUT /api/users/:id</code> - Update User
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-user-delete">
                                                <label class="form-check-label" for="perm-user-delete">
                                                    <code>DELETE /api/users/:id</code> - Delete User
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Auth Controller -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="authControllerHeading">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#authControllerCollapse" aria-expanded="false" aria-controls="authControllerCollapse">
                                            Auth Controller
                                        </button>
                                    </h2>
                                    <div id="authControllerCollapse" class="accordion-collapse collapse" aria-labelledby="authControllerHeading" data-bs-parent="#controllersAccordion">
                                        <div class="accordion-body">
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-auth-login">
                                                <label class="form-check-label" for="perm-auth-login">
                                                    <code>POST /api/auth/login</code> - Login
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-auth-profile">
                                                <label class="form-check-label" for="perm-auth-profile">
                                                    <code>GET /api/auth/profile</code> - Get Profile
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Admin Views Controller -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="viewControllerHeading">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#viewControllerCollapse" aria-expanded="false" aria-controls="viewControllerCollapse">
                                            Admin Views Controller
                                        </button>
                                    </h2>
                                    <div id="viewControllerCollapse" class="accordion-collapse collapse" aria-labelledby="viewControllerHeading" data-bs-parent="#controllersAccordion">
                                        <div class="accordion-body">
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-view-dashboard">
                                                <label class="form-check-label" for="perm-view-dashboard">
                                                    <code>GET /admin</code> - Admin Dashboard
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-view-users">
                                                <label class="form-check-label" for="perm-view-users">
                                                    <code>GET /admin/users</code> - User Management
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-view-roles">
                                                <label class="form-check-label" for="perm-view-roles">
                                                    <code>GET /admin/roles</code> - Role Management
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input controller-permission" type="checkbox" id="perm-view-permissions">
                                                <label class="form-check-label" for="perm-view-permissions">
                                                    <code>GET /admin/permissions</code> - Permission Management
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-permissions-btn">Save Permissions</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if user is logged in and has admin role
            checkAuth();

            // Set user name in sidebar
            const userData = localStorage.getItem('user');
            if (userData) {
                const user = JSON.parse(userData);
                document.getElementById('user-name').textContent = user.name;
            }            // Logout functionality
            document.getElementById('logout-btn').addEventListener('click', function(e) {
                e.preventDefault();
                
                // Call the server-side logout API first
                fetch('/api/auth/logout', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                })
                .then(response => response.json())
                .then(data => {
                    // Then clear local storage
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    // Redirect to login page after successful logout
                    window.location.href = '/login';
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    // Still clear local storage and redirect even if there's an error
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    window.location.href = '/login';
                });
            });

            // Refresh button functionality
            document.getElementById('refresh-btn').addEventListener('click', function() {
                loadRoles();
            });

            // Toggle all permissions
            document.getElementById('toggle-all-permissions').addEventListener('click', function() {
                const checkboxes = document.querySelectorAll('.controller-permission');
                const allChecked = Array.from(checkboxes).every(cb => cb.checked);
                
                checkboxes.forEach(checkbox => {
                    checkbox.checked = !allChecked;
                });
            });

            // Add role functionality
            document.getElementById('add-role-btn').addEventListener('click', async function() {
                const nameInput = document.getElementById('role-name');
                const descriptionInput = document.getElementById('role-description');
                const errorAlert = document.getElementById('add-role-error');

                // Validate form
                if (!nameInput.value) {
                    errorAlert.textContent = 'Role name is required';
                    errorAlert.classList.remove('d-none');
                    return;
                }

                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch('/api/roles', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            name: nameInput.value,
                            description: descriptionInput.value || ''
                        })
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to add role');
                    }

                    // Close modal and reload data
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addRoleModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('add-role-form').reset();
                    errorAlert.classList.add('d-none');
                    
                    // Reload roles
                    loadRoles();
                    
                    // Show success message
                    alert('Role added successfully');
                    
                } catch (error) {
                    errorAlert.textContent = error.message;
                    errorAlert.classList.remove('d-none');
                }
            });

            // Update role functionality
            document.getElementById('update-role-btn').addEventListener('click', async function() {
                const roleId = document.getElementById('edit-role-id').value;
                const nameInput = document.getElementById('edit-role-name');
                const descriptionInput = document.getElementById('edit-role-description');
                const errorAlert = document.getElementById('edit-role-error');

                // Validate form
                if (!nameInput.value) {
                    errorAlert.textContent = 'Role name is required';
                    errorAlert.classList.remove('d-none');
                    return;
                }

                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`/api/roles/${roleId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            name: nameInput.value,
                            description: descriptionInput.value || ''
                        })
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to update role');
                    }

                    // Close modal and reload data
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editRoleModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('edit-role-form').reset();
                    errorAlert.classList.add('d-none');
                    
                    // Reload roles
                    loadRoles();
                    
                    // Show success message
                    alert('Role updated successfully');
                    
                } catch (error) {
                    errorAlert.textContent = error.message;
                    errorAlert.classList.remove('d-none');
                }
            });

            // Save permissions functionality
            document.getElementById('save-permissions-btn').addEventListener('click', async function() {
                const roleId = document.getElementById('permissions-role-id').value;
                const errorAlert = document.getElementById('role-permissions-error');

                // Collect all selected permissions
                const featurePermissions = Array.from(document.querySelectorAll('.feature-permission:checked')).map(cb => cb.id.replace('perm-', ''));
                const controllerPermissions = Array.from(document.querySelectorAll('.controller-permission:checked')).map(cb => cb.id.replace('perm-', ''));

                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`/api/roles/${roleId}/permissions`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            featurePermissions,
                            controllerPermissions
                        })
                    });

                    if (!response.ok) {
                        const data = await response.json();
                        throw new Error(data.message || 'Failed to update permissions');
                    }

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('rolePermissionsModal'));
                    modal.hide();
                    
                    // Reload roles
                    loadRoles();
                    
                    // Show success message
                    alert('Permissions updated successfully');
                    
                } catch (error) {
                    errorAlert.textContent = error.message;
                    errorAlert.classList.remove('d-none');
                }
            });

            // Auth check function
            function checkAuth() {
                const token = localStorage.getItem('token');
                const userData = localStorage.getItem('user');
                
                if (!token || !userData) {
                    window.location.href = '/login';
                    return;
                }
                
                const user = JSON.parse(userData);
                if (!user.roles.includes('admin')) {
                    alert('You do not have permission to access this page');
                    window.location.href = '/dashboard';
                }
            }

            // Load roles function
            async function loadRoles() {
                try {
                    const token = localStorage.getItem('token');
                    if (!token) {
                        throw new Error('Authentication required');
                    }

                    const response = await fetch('/api/roles', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch roles');
                    }

                    const roles = await response.json();
                    updateRolesTable(roles);
                    
                } catch (error) {
                    console.error('Error loading roles:', error);
                    alert('Failed to load roles: ' + error.message);
                }
            }

            // Update roles table
            function updateRolesTable(roles) {
                const rolesTable = document.getElementById('roles-table');
                rolesTable.innerHTML = '';
                
                if (roles.length === 0) {
                    rolesTable.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center">No roles found</td>
                        </tr>
                    `;
                    return;
                }
                
                roles.forEach(role => {
                    const row = document.createElement('tr');
                    
                    row.innerHTML = `
                        <td>${role.id}</td>
                        <td>${role.name}</td>
                        <td>${role.description || '-'}</td>
                        <td>${role.usersCount || 0}</td>
                        <td>${new Date(role.createdAt).toLocaleString()}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-success me-1 manage-permissions" data-id="${role.id}" data-name="${role.name}">
                                <i class="bi bi-key"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary me-1 edit-role" data-id="${role.id}">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-role" data-id="${role.id}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    `;
                    
                    rolesTable.appendChild(row);
                });
                
                // Add event listeners for buttons
                document.querySelectorAll('.manage-permissions').forEach(button => {
                    button.addEventListener('click', function() {
                        const roleId = this.getAttribute('data-id');
                        const roleName = this.getAttribute('data-name');
                        openPermissionsModal(roleId, roleName);
                    });
                });
                
                document.querySelectorAll('.edit-role').forEach(button => {
                    button.addEventListener('click', function() {
                        const roleId = this.getAttribute('data-id');
                        openEditRoleModal(roleId);
                    });
                });
                
                document.querySelectorAll('.delete-role').forEach(button => {
                    button.addEventListener('click', function() {
                        if (confirm('Are you sure you want to delete this role?')) {
                            const roleId = this.getAttribute('data-id');
                            deleteRole(roleId);
                        }
                    });
                });
            }

            // Open edit role modal
            async function openEditRoleModal(roleId) {
                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`/api/roles/${roleId}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch role');
                    }

                    const role = await response.json();
                    
                    document.getElementById('edit-role-id').value = role.id;
                    document.getElementById('edit-role-name').value = role.name;
                    document.getElementById('edit-role-description').value = role.description || '';
                    
                    document.getElementById('edit-role-error').classList.add('d-none');
                    
                    const editRoleModal = new bootstrap.Modal(document.getElementById('editRoleModal'));
                    editRoleModal.show();
                    
                } catch (error) {
                    console.error('Error fetching role:', error);
                    alert('Failed to fetch role: ' + error.message);
                }
            }

            // Open permissions modal
            async function openPermissionsModal(roleId, roleName) {
                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`/api/roles/${roleId}/permissions`, {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch permissions');
                    }

                    const permissions = await response.json();
                    
                    document.getElementById('permissions-role-id').value = roleId;
                    document.getElementById('permissions-role-name').textContent = `Permissions for role: ${roleName}`;
                    
                    // Reset all checkboxes
                    document.querySelectorAll('.feature-permission, .controller-permission').forEach(cb => {
                        cb.checked = false;
                    });
                    
                    // Check the permissions that the role has
                    permissions.featurePermissions.forEach(perm => {
                        const checkbox = document.getElementById(`perm-${perm}`);
                        if (checkbox) checkbox.checked = true;
                    });
                    
                    permissions.controllerPermissions.forEach(perm => {
                        const checkbox = document.getElementById(`perm-${perm}`);
                        if (checkbox) checkbox.checked = true;
                    });
                    
                    document.getElementById('role-permissions-error').classList.add('d-none');
                    
                    const permissionsModal = new bootstrap.Modal(document.getElementById('rolePermissionsModal'));
                    permissionsModal.show();
                    
                } catch (error) {
                    console.error('Error fetching permissions:', error);
                    alert('Failed to fetch permissions: ' + error.message);
                }
            }

            // Delete role
            async function deleteRole(roleId) {
                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`/api/roles/${roleId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to delete role');
                    }
                    
                    alert('Role deleted successfully');
                    loadRoles();
                    
                } catch (error) {
                    console.error('Error deleting role:', error);
                    alert('Failed to delete role: ' + error.message);
                }
            }

            // Initial data load
            loadRoles();
        });
    </script>
</body>
</html>